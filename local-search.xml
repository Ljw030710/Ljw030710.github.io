<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>解决undefined symbol.nvJitLinkComplete 12 4.version libnvjitlink.so.12问题</title>
    <link href="/2024/12/26/%E8%A7%A3%E5%86%B3undefined-symbol-nvJitLinkComplete-12-4-version-libnvjitlink-so-12%E9%97%AE%E9%A2%98/"/>
    <url>/2024/12/26/%E8%A7%A3%E5%86%B3undefined-symbol-nvJitLinkComplete-12-4-version-libnvjitlink-so-12%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="一个神奇的下午突然服务器抽风报错了，torch找不到了。"><a href="#一个神奇的下午突然服务器抽风报错了，torch找不到了。" class="headerlink" title="一个神奇的下午突然服务器抽风报错了，torch找不到了。"></a>一个神奇的下午突然服务器抽风报错了，torch找不到了。</h3><p><img src="https://cdn.jsdelivr.net/gh/Ljw030710/blogImage@main/788f0b191ffeff938a0980e8c38589e.png" alt="报错"></p><h4 id="上网搜索，比较多的说法是torch版本号和cuda版本对不上、但是之前服务器是能够正常的运行，因此个人认为不会出现对应的问题，翻了一下，找到一个解决方案的博客解决libcusparse-so-12-undefined-symbol-nvJitLinkAddData-12-1-version-libnvJitLink-so-12-CSDN博客"><a href="#上网搜索，比较多的说法是torch版本号和cuda版本对不上、但是之前服务器是能够正常的运行，因此个人认为不会出现对应的问题，翻了一下，找到一个解决方案的博客解决libcusparse-so-12-undefined-symbol-nvJitLinkAddData-12-1-version-libnvJitLink-so-12-CSDN博客" class="headerlink" title="上网搜索，比较多的说法是torch版本号和cuda版本对不上、但是之前服务器是能够正常的运行，因此个人认为不会出现对应的问题，翻了一下，找到一个解决方案的博客解决libcusparse.so.12: undefined symbol: __nvJitLinkAddData_12_1, version libnvJitLink.so.12-CSDN博客"></a>上网搜索，比较多的说法是torch版本号和cuda版本对不上、但是之前服务器是能够正常的运行，因此个人认为不会出现对应的问题，翻了一下，找到一个解决方案的博客<a href="https://blog.csdn.net/qq_42730750/article/details/139582293">解决libcusparse.so.12: undefined symbol: __nvJitLinkAddData_12_1, version libnvJitLink.so.12-CSDN博客</a></h4><h4 id="写这个博客是因为这个博客稍微有点小问题，步骤讲的不是很清楚，但是的确给我解惑了。如果你重装了conda，发现torch版本都对的上，就是报这个错误，那么就需要考虑动态连接的问题。"><a href="#写这个博客是因为这个博客稍微有点小问题，步骤讲的不是很清楚，但是的确给我解惑了。如果你重装了conda，发现torch版本都对的上，就是报这个错误，那么就需要考虑动态连接的问题。" class="headerlink" title="写这个博客是因为这个博客稍微有点小问题，步骤讲的不是很清楚，但是的确给我解惑了。如果你重装了conda，发现torch版本都对的上，就是报这个错误，那么就需要考虑动态连接的问题。"></a>写这个博客是因为这个博客稍微有点小问题，步骤讲的不是很清楚，但是的确给我解惑了。如果你重装了conda，发现torch版本都对的上，就是报这个错误，那么就需要考虑动态连接的问题。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ldd /home/lijiawei/anaconda3/envs/weitiao/lib/python3.1/site-packages/nvidia/cusparse/lib/libcusparse.so.12<br></code></pre></td></tr></table></figure><h4 id="首先进行连接库。找到对应的虚拟环境下的对应的文件。"><a href="#首先进行连接库。找到对应的虚拟环境下的对应的文件。" class="headerlink" title="首先进行连接库。找到对应的虚拟环境下的对应的文件。"></a>首先进行连接库。找到对应的虚拟环境下的对应的文件。</h4><p><img src="https://cdn.jsdelivr.net/gh/Ljw030710/blogImage@main/54d7bc9994a1512a494e533d90a1ee6.png" alt="输入后的情况"></p><h4 id="会发现第二个的连接是出现问题的，连接到系统的了，因此要对第二个的连接库进行修改。"><a href="#会发现第二个的连接是出现问题的，连接到系统的了，因此要对第二个的连接库进行修改。" class="headerlink" title="会发现第二个的连接是出现问题的，连接到系统的了，因此要对第二个的连接库进行修改。"></a>会发现第二个的连接是出现问题的，连接到系统的了，因此要对第二个的连接库进行修改。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$LD_LIBRARY_PATH</span><br> <span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/home/lijiawei/anaconda3/envs/weitiao/lib/python3.1/site-packages/nvidia/nvjitlink/lib:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br><br></code></pre></td></tr></table></figure><h4 id="通过找到你的虚拟环境中的对应的文件，重新进行路径的修改。"><a href="#通过找到你的虚拟环境中的对应的文件，重新进行路径的修改。" class="headerlink" title="通过找到你的虚拟环境中的对应的文件，重新进行路径的修改。"></a>通过找到你的虚拟环境中的对应的文件，重新进行路径的修改。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ldd /home/lijiawei/anaconda3/envs/weitiao/lib/python3.1/site-packages/nvidia/cusparse/lib/libcusparse.so.12<br></code></pre></td></tr></table></figure><h4 id="再次链接"><a href="#再次链接" class="headerlink" title="再次链接"></a>再次链接</h4><p><img src="https://cdn.jsdelivr.net/gh/Ljw030710/blogImage@main/02f58de2178ccead1ec5868a77fc6bb.png" alt="再次链接"></p><h4 id="即可发现是链接成功的。再次运行对应的项目即可，但是现在命令行可以了，图形化运行还不行，这事有点抽象的。"><a href="#即可发现是链接成功的。再次运行对应的项目即可，但是现在命令行可以了，图形化运行还不行，这事有点抽象的。" class="headerlink" title="即可发现是链接成功的。再次运行对应的项目即可，但是现在命令行可以了，图形化运行还不行，这事有点抽象的。"></a>即可发现是链接成功的。再次运行对应的项目即可，但是现在命令行可以了，图形化运行还不行，这事有点抽象的。</h4><h3 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h3><h4 id="这种方法需要每次进入就要重新链接一遍非常麻烦，因此在-bashrc文件里全局存储。"><a href="#这种方法需要每次进入就要重新链接一遍非常麻烦，因此在-bashrc文件里全局存储。" class="headerlink" title="这种方法需要每次进入就要重新链接一遍非常麻烦，因此在.bashrc文件里全局存储。"></a>这种方法需要每次进入就要重新链接一遍非常麻烦，因此在.bashrc文件里全局存储。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/home/lijiawei/anaconda3/envs/weitiao/lib/python3.1/site-packages/nvidia/nvjitlink/lib:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>大模型微调</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLaMA-Factory微调qwen2-VL(无sudo)</title>
    <link href="/2024/12/13/LLaMA-Factory%E5%BE%AE%E8%B0%83qwen2-VL-%E6%97%A0sudo/"/>
    <url>/2024/12/13/LLaMA-Factory%E5%BE%AE%E8%B0%83qwen2-VL-%E6%97%A0sudo/</url>
    
    <content type="html"><![CDATA[<h3 id="写这个的目的是自己前几个月微调的qwen2相对来说比较轻松但是这次实验室的机子由于重装了环境全没了，因此在conda上面踩了很多网上的坑，还有qwen2-VL-instruction的批量处理数据在网上也几乎找不到正确的写法，写这篇是为了记录一下微调的步骤和方法。"><a href="#写这个的目的是自己前几个月微调的qwen2相对来说比较轻松但是这次实验室的机子由于重装了环境全没了，因此在conda上面踩了很多网上的坑，还有qwen2-VL-instruction的批量处理数据在网上也几乎找不到正确的写法，写这篇是为了记录一下微调的步骤和方法。" class="headerlink" title="写这个的目的是自己前几个月微调的qwen2相对来说比较轻松但是这次实验室的机子由于重装了环境全没了，因此在conda上面踩了很多网上的坑，还有qwen2-VL-instruction的批量处理数据在网上也几乎找不到正确的写法，写这篇是为了记录一下微调的步骤和方法。"></a>写这个的目的是自己前几个月微调的qwen2相对来说比较轻松但是这次实验室的机子由于重装了环境全没了，因此在conda上面踩了很多网上的坑，还有qwen2-VL-instruction的批量处理数据在网上也几乎找不到正确的写法，写这篇是为了记录一下微调的步骤和方法。</h3><h3 id="实验机器：A6000-40G显存（实际估计二十左右）"><a href="#实验机器：A6000-40G显存（实际估计二十左右）" class="headerlink" title="实验机器：A6000 40G显存（实际估计二十左右）"></a>实验机器：A6000 40G显存（实际估计二十左右）</h3><h3 id="实验环境：linux"><a href="#实验环境：linux" class="headerlink" title="实验环境：linux"></a>实验环境：linux</h3><h3 id="一、首先安装anconda"><a href="#一、首先安装anconda" class="headerlink" title="一、首先安装anconda"></a>一、首先安装anconda</h3><h4 id="linux安装Anaconda及pytorch配置环境-无root权限-linux没有root怎么配置anaconda-CSDN博客这个文章第五点顺手做点别的什么都是可以安心食用的。"><a href="#linux安装Anaconda及pytorch配置环境-无root权限-linux没有root怎么配置anaconda-CSDN博客这个文章第五点顺手做点别的什么都是可以安心食用的。" class="headerlink" title="linux安装Anaconda及pytorch配置环境 无root权限_linux没有root怎么配置anaconda-CSDN博客这个文章第五点顺手做点别的什么都是可以安心食用的。"></a><a href="https://blog.csdn.net/longshaonihaoa/article/details/104996658">linux安装Anaconda及pytorch配置环境 无root权限_linux没有root怎么配置anaconda-CSDN博客</a>这个文章第五点顺手做点别的什么都是可以安心食用的。</h4><h4 id="有个需要注意的点是source-bashrc发现仍未安装到路径中，那就手动添加。"><a href="#有个需要注意的点是source-bashrc发现仍未安装到路径中，那就手动添加。" class="headerlink" title="有个需要注意的点是source ~/. bashrc发现仍未安装到路径中，那就手动添加。"></a>有个需要注意的点是<code>source ~/. bashrc</code>发现仍未安装到路径中，那就手动添加。</h4><h3 id="二、conda虚拟环境配置"><a href="#二、conda虚拟环境配置" class="headerlink" title="二、conda虚拟环境配置"></a>二、conda虚拟环境配置</h3><h4 id="首先去到github中搜LLaMA-Factory，git-clone到文件夹中即可。"><a href="#首先去到github中搜LLaMA-Factory，git-clone到文件夹中即可。" class="headerlink" title="首先去到github中搜LLaMA-Factory，git clone到文件夹中即可。"></a>首先去到github中搜LLaMA-Factory，<code>git clone</code>到文件夹中即可。</h4><h4 id="接着网上搜LLaMA-Factory配置会看到其中大部分文档会教你先安装torch，但是CUDA版本相对较高就会导致和LLaMA-Factory的版本不兼容，比如实验室的版本就是CUDA-12-1，安装的pytorch版本就会过高，但是CUDA是可以向下兼容一些版本的。"><a href="#接着网上搜LLaMA-Factory配置会看到其中大部分文档会教你先安装torch，但是CUDA版本相对较高就会导致和LLaMA-Factory的版本不兼容，比如实验室的版本就是CUDA-12-1，安装的pytorch版本就会过高，但是CUDA是可以向下兼容一些版本的。" class="headerlink" title="接着网上搜LLaMA-Factory配置会看到其中大部分文档会教你先安装torch，但是CUDA版本相对较高就会导致和LLaMA-Factory的版本不兼容，比如实验室的版本就是CUDA 12.1，安装的pytorch版本就会过高，但是CUDA是可以向下兼容一些版本的。"></a>接着<strong>网上搜LLaMA-Factory配置</strong>会看到其中大部分文档会教你先安装torch，但是CUDA版本相对较高就会导致和LLaMA-Factory的版本不兼容，比如实验室的版本就是CUDA 12.1，安装的pytorch版本就会过高，但是CUDA是可以向下兼容一些版本的。</h4><h4 id="在2024-12（提及日期指的是现阶段的包版本号，以后可能会出现变化）"><a href="#在2024-12（提及日期指的是现阶段的包版本号，以后可能会出现变化）" class="headerlink" title="在2024.12（提及日期指的是现阶段的包版本号，以后可能会出现变化）"></a>在2024.12（提及日期指的是现阶段的包版本号，以后可能会出现变化）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create --name LLaMA python=3.10<br></code></pre></td></tr></table></figure><h4 id="这是先创建一个conda的虚拟环境。"><a href="#这是先创建一个conda的虚拟环境。" class="headerlink" title="这是先创建一个conda的虚拟环境。"></a>这是先创建一个conda的虚拟环境。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate LLaMA;<br>pip install -r requirements.txt<br></code></pre></td></tr></table></figure><h4 id="通过pip项目里面的requirements-txt我们可以直接安装对应的可以和LLaMA-Factory兼容的pytorch的版本。"><a href="#通过pip项目里面的requirements-txt我们可以直接安装对应的可以和LLaMA-Factory兼容的pytorch的版本。" class="headerlink" title="通过pip项目里面的requirements.txt我们可以直接安装对应的可以和LLaMA-Factory兼容的pytorch的版本。"></a>通过pip项目里面的requirements.txt我们可以直接安装对应的可以和LLaMA-Factory兼容的pytorch的版本。</h4><h4 id="在这里我们需要观察会不会出现一些红色的报错如果出现一些红色的报错那有可能出现了一些问题。之后就算全部重新安装好了也有可能会出现一些问题。可以多创建几个环境，跑到不报错就行。"><a href="#在这里我们需要观察会不会出现一些红色的报错如果出现一些红色的报错那有可能出现了一些问题。之后就算全部重新安装好了也有可能会出现一些问题。可以多创建几个环境，跑到不报错就行。" class="headerlink" title="在这里我们需要观察会不会出现一些红色的报错如果出现一些红色的报错那有可能出现了一些问题。之后就算全部重新安装好了也有可能会出现一些问题。可以多创建几个环境，跑到不报错就行。"></a><strong>在这里我们需要观察会不会出现一些红色的报错</strong>如果出现一些红色的报错那有可能出现了一些问题。之后就算全部重新安装好了也有可能会出现一些问题。可以多创建几个环境，跑到不报错就行。</h4><h3 id="三、运行LLaMA-Factory"><a href="#三、运行LLaMA-Factory" class="headerlink" title="三、运行LLaMA-Factory"></a>三、运行LLaMA-Factory</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> LLaMA-Factory<br>python src/webui.py<br></code></pre></td></tr></table></figure><h4 id="如果可以成功运行就可以出现对应的webui页面。"><a href="#如果可以成功运行就可以出现对应的webui页面。" class="headerlink" title="如果可以成功运行就可以出现对应的webui页面。"></a>如果可以成功运行就可以出现对应的webui页面。</h4><h4 id="如果出现-llamafactory-cli：未找到命令这样的情况"><a href="#如果出现-llamafactory-cli：未找到命令这样的情况" class="headerlink" title="如果出现 llamafactory-cli：未找到命令这样的情况"></a>如果出现 llamafactory-cli：未找到命令这样的情况</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> LLaMA-Factory<br>pip install -e <span class="hljs-string">&quot;.[torch,metrics]&quot;</span><br></code></pre></td></tr></table></figure><h4 id="这种情况在conda环境容易发生"><a href="#这种情况在conda环境容易发生" class="headerlink" title="这种情况在conda环境容易发生"></a>这种情况在conda环境容易发生</h4><h4 id="还有不能运行大概率是包没装对。"><a href="#还有不能运行大概率是包没装对。" class="headerlink" title="还有不能运行大概率是包没装对。"></a>还有不能运行大概率是包没装对。</h4><h3 id="四、模型的安装"><a href="#四、模型的安装" class="headerlink" title="四、模型的安装"></a>四、模型的安装</h3><h4 id="由于没有管理员权限无法安装git中的lfs这个包，这个包是git专门用来下载那些巨大无比的文件。没有他我们是能换modelspace这个国内的大模型社区进行下载。"><a href="#由于没有管理员权限无法安装git中的lfs这个包，这个包是git专门用来下载那些巨大无比的文件。没有他我们是能换modelspace这个国内的大模型社区进行下载。" class="headerlink" title="由于没有管理员权限无法安装git中的lfs这个包，这个包是git专门用来下载那些巨大无比的文件。没有他我们是能换modelspace这个国内的大模型社区进行下载。"></a>由于没有管理员权限无法安装git中的lfs这个包，这个包是git专门用来下载那些巨大无比的文件。没有他我们是能换modelspace这个国内的大模型社区进行下载。</h4><h4 id="我个人推荐命令行下载。"><a href="#我个人推荐命令行下载。" class="headerlink" title="我个人推荐命令行下载。"></a>我个人推荐命令行下载。</h4><h4 id="在modelspace中有三四个方法可以下载。"><a href="#在modelspace中有三四个方法可以下载。" class="headerlink" title="在modelspace中有三四个方法可以下载。"></a>在modelspace中有三四个方法可以下载。</h4><h4 id="模型的下载-·-文档中心"><a href="#模型的下载-·-文档中心" class="headerlink" title="模型的下载 · 文档中心"></a><a href="https://www.modelscope.cn/docs/models/download">模型的下载 · 文档中心</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install modelspace<br></code></pre></td></tr></table></figure><h4 id="如果下载，modelspace这个模块进行import发现不行就说明处理问题。可以单独重新conda一个虚拟环境来modelspace。"><a href="#如果下载，modelspace这个模块进行import发现不行就说明处理问题。可以单独重新conda一个虚拟环境来modelspace。" class="headerlink" title="如果下载，modelspace这个模块进行import发现不行就说明处理问题。可以单独重新conda一个虚拟环境来modelspace。"></a>如果下载，modelspace这个模块进行import发现不行就说明处理问题。可以单独重新conda一个虚拟环境来modelspace。</h4><h4 id="modelspace环境进行下载"><a href="#modelspace环境进行下载" class="headerlink" title="modelspace环境进行下载"></a>modelspace环境进行下载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">modelscope download --model <span class="hljs-string">&#x27;Qwen/Qwen2-7b&#x27;</span> --local_dir <span class="hljs-string">&#x27;path/to/dir&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="命令行稳定性相对来说比用代码下载好，用文档里面的代码进行模型的下载会经常出现一些报错。"><a href="#命令行稳定性相对来说比用代码下载好，用文档里面的代码进行模型的下载会经常出现一些报错。" class="headerlink" title="命令行稳定性相对来说比用代码下载好，用文档里面的代码进行模型的下载会经常出现一些报错。"></a>命令行稳定性相对来说比用代码下载好，用文档里面的代码进行模型的下载会经常出现一些报错。</h4><h4 id="关于模型的下载我个人是在LLaMA-Factory的文件夹之外创建了model文件夹，存放大模型的位置是-model-hub-xxx-你的大模型"><a href="#关于模型的下载我个人是在LLaMA-Factory的文件夹之外创建了model文件夹，存放大模型的位置是-model-hub-xxx-你的大模型" class="headerlink" title="关于模型的下载我个人是在LLaMA-Factory的文件夹之外创建了model文件夹，存放大模型的位置是/model/hub/xxx(你的大模型)"></a>关于模型的下载我个人是在LLaMA-Factory的文件夹之外创建了model文件夹，存放大模型的位置是/model/hub/xxx(你的大模型)</h4><h3 id="五、关于数据集的格式"><a href="#五、关于数据集的格式" class="headerlink" title="五、关于数据集的格式"></a>五、关于数据集的格式</h3><h4 id="进入-LLaMA-Factory-data我们可以看到很多的数据集格式。"><a href="#进入-LLaMA-Factory-data我们可以看到很多的数据集格式。" class="headerlink" title="进入~/LLaMA-Factory/data我们可以看到很多的数据集格式。"></a>进入~/LLaMA-Factory/data我们可以看到很多的数据集格式。</h4><h4 id="模仿这些数据集格式来构造自己的数据集格式即可。"><a href="#模仿这些数据集格式来构造自己的数据集格式即可。" class="headerlink" title="模仿这些数据集格式来构造自己的数据集格式即可。"></a>模仿这些数据集格式来构造自己的数据集格式即可。</h4><h4 id="简单的文字的格式很简单，我讲一下有图片的格式。"><a href="#简单的文字的格式很简单，我讲一下有图片的格式。" class="headerlink" title="简单的文字的格式很简单，我讲一下有图片的格式。"></a>简单的文字的格式很简单，我讲一下有图片的格式。</h4><h4 id="首先创建一个数据集文件夹data-里面在创建一个文件夹images，然后data下的另外一个文件是json文件的数据集格式。"><a href="#首先创建一个数据集文件夹data-里面在创建一个文件夹images，然后data下的另外一个文件是json文件的数据集格式。" class="headerlink" title="首先创建一个数据集文件夹data,里面在创建一个文件夹images，然后data下的另外一个文件是json文件的数据集格式。"></a>首先创建一个数据集文件夹data,里面在创建一个文件夹images，然后data下的另外一个文件是json文件的数据集格式。</h4><h4 id="有些模型是不支持图片这些，不过多模态的大模型大多数是可以使用的。"><a href="#有些模型是不支持图片这些，不过多模态的大模型大多数是可以使用的。" class="headerlink" title="有些模型是不支持图片这些，不过多模态的大模型大多数是可以使用的。"></a>有些模型是不支持图片这些，不过多模态的大模型大多数是可以使用的。</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//我用的是最基础的</span><br><span class="hljs-attr">&quot;instruction&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-comment">//描述</span><br><span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span>images/xxx.jpg<br><span class="hljs-attr">&quot;output&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-comment">//想要的结果</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="这样子数据集就是可以的了"><a href="#这样子数据集就是可以的了" class="headerlink" title="这样子数据集就是可以的了"></a>这样子数据集就是可以的了</h4><h3 id="六、微调"><a href="#六、微调" class="headerlink" title="六、微调"></a>六、微调</h3><h4 id="对于不同的模型，微调的参数自然是不同的。"><a href="#对于不同的模型，微调的参数自然是不同的。" class="headerlink" title="对于不同的模型，微调的参数自然是不同的。"></a>对于不同的模型，微调的参数自然是不同的。</h4><h4 id="对于可视化微调和代码微调其实我觉得没什么区别，我个人更喜欢可视化微调。"><a href="#对于可视化微调和代码微调其实我觉得没什么区别，我个人更喜欢可视化微调。" class="headerlink" title="对于可视化微调和代码微调其实我觉得没什么区别，我个人更喜欢可视化微调。"></a>对于可视化微调和代码微调其实我觉得没什么区别，我个人更喜欢可视化微调。</h4><h4 id="对于微调的参数我是看的网上的文章进行参数的调整。使用PAI-LLaMA-Factory-微调-Qwen2-VL-模型，搭建文旅领域知识问答机器人-阿里云开发者社区"><a href="#对于微调的参数我是看的网上的文章进行参数的调整。使用PAI-LLaMA-Factory-微调-Qwen2-VL-模型，搭建文旅领域知识问答机器人-阿里云开发者社区" class="headerlink" title="对于微调的参数我是看的网上的文章进行参数的调整。使用PAI+LLaMA Factory 微调 Qwen2-VL 模型，搭建文旅领域知识问答机器人-阿里云开发者社区"></a>对于微调的参数我是看的网上的文章进行参数的调整。<a href="https://developer.aliyun.com/article/1613527">使用PAI+LLaMA Factory 微调 Qwen2-VL 模型，搭建文旅领域知识问答机器人-阿里云开发者社区</a></h4><h4 id="这里面都是有微调的方法不多赘述了。"><a href="#这里面都是有微调的方法不多赘述了。" class="headerlink" title="这里面都是有微调的方法不多赘述了。"></a>这里面都是有微调的方法不多赘述了。</h4><h3 id="七、微调后模型的整合"><a href="#七、微调后模型的整合" class="headerlink" title="七、微调后模型的整合"></a>七、微调后模型的整合</h3><p><img src="https://cdn.jsdelivr.net/gh/Ljw030710/blogImage@main/20241213172912.png" alt="四个模块"></p><h4 id="我们看到Export是模型为微调后进行整合。"><a href="#我们看到Export是模型为微调后进行整合。" class="headerlink" title="我们看到Export是模型为微调后进行整合。"></a>我们看到Export是模型为微调后进行整合。</h4><p><img src="https://cdn.jsdelivr.net/gh/Ljw030710/blogImage@main/20241213173051.png" alt="export"></p><h4 id="首先model-path仍是原来的模型，在微调完后，在LLaMA-Factory-save这个文件中可以看到微调的文件，然后点击checkpoint-path会有对应的日志文件。然后就是export-dir中填入导入的文件夹。我个人仍是导入到model-hub里面。"><a href="#首先model-path仍是原来的模型，在微调完后，在LLaMA-Factory-save这个文件中可以看到微调的文件，然后点击checkpoint-path会有对应的日志文件。然后就是export-dir中填入导入的文件夹。我个人仍是导入到model-hub里面。" class="headerlink" title="首先model path仍是原来的模型，在微调完后，在LLaMA-Factory/save这个文件中可以看到微调的文件，然后点击checkpoint path会有对应的日志文件。然后就是export dir中填入导入的文件夹。我个人仍是导入到model/hub里面。"></a>首先model path仍是原来的模型，在微调完后，在LLaMA-Factory/save这个文件中可以看到微调的文件，然后点击checkpoint path会有对应的日志文件。然后就是export dir中填入导入的文件夹。我个人仍是导入到model/hub里面。</h4><h3 id="八、批量处理代码"><a href="#八、批量处理代码" class="headerlink" title="八、批量处理代码"></a>八、批量处理代码</h3><h4 id="网上的qwen2-VL-Instruct处理批量文件资料比较少，因此自己根据网上的代码进行修改。"><a href="#网上的qwen2-VL-Instruct处理批量文件资料比较少，因此自己根据网上的代码进行修改。" class="headerlink" title="网上的qwen2-VL-Instruct处理批量文件资料比较少，因此自己根据网上的代码进行修改。"></a>网上的qwen2-VL-Instruct处理批量文件资料比较少，因此自己根据网上的代码进行修改。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Qwen2VLForConditionalGeneration, AutoProcessor<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br><span class="hljs-comment"># 设置随机种子（可选）</span><br>torch.manual_seed(<span class="hljs-number">1234</span>)<br><br><span class="hljs-comment"># 强制使用 cuda:0（如果有可用的GPU）</span><br>device = torch.device(<span class="hljs-string">&quot;cuda:0&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;使用设备: <span class="hljs-subst">&#123;device&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 加载模型，确保它在指定的设备上</span><br>model = Qwen2VLForConditionalGeneration.from_pretrained(<br>    <span class="hljs-string">&quot;/home/lijiawei/model/hub/qwen/qwen2-VLtune&quot;</span>,  <span class="hljs-comment"># 替换为你的模型路径或名称</span><br>    torch_dtype=torch.float32,  <span class="hljs-comment"># 使用半精度以节省内存</span><br>    device_map=&#123;<span class="hljs-string">&quot;&quot;</span>: device&#125;,  <span class="hljs-comment"># 将整个模型加载到指定设备</span><br>    trust_remote_code=<span class="hljs-literal">True</span>  <span class="hljs-comment"># 如果模型需要自定义代码</span><br>).<span class="hljs-built_in">eval</span>()  <span class="hljs-comment"># 不需要再调用 .to(device) 因为 device_map 已经指定</span><br><br><span class="hljs-comment"># 加载处理器，用于预处理输入数据</span><br>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;/home/lijiawei/model/hub/qwen/qwen2-VLtune&quot;</span>)  <span class="hljs-comment"># 替换为你的处理器路径或名称</span><br><br><span class="hljs-comment"># 定义输入文件夹路径和输出JSON文件路径</span><br>input_folder = <span class="hljs-string">&quot;/home/lijiawei/extracted_images&quot;</span>  <span class="hljs-comment"># 替换为你的图片文件夹路径</span><br>output_json = <span class="hljs-string">&quot;/home/lijiawei/model/processed_results.json&quot;</span>  <span class="hljs-comment"># 替换为你希望保存结果的JSON文件路径</span><br><br><span class="hljs-comment"># 支持的图片扩展名</span><br>supported_extensions = (<span class="hljs-string">&#x27;.png&#x27;</span>, <span class="hljs-string">&#x27;.jpg&#x27;</span>, <span class="hljs-string">&#x27;.jpeg&#x27;</span>, <span class="hljs-string">&#x27;.bmp&#x27;</span>, <span class="hljs-string">&#x27;.gif&#x27;</span>, <span class="hljs-string">&#x27;.tiff&#x27;</span>)<br><br><span class="hljs-comment"># 获取所有图片文件路径</span><br>image_paths = [<br>    os.path.join(input_folder, img)<br>    <span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> os.listdir(input_folder)<br>    <span class="hljs-keyword">if</span> img.lower().endswith(supported_extensions)<br>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;找到 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(image_paths)&#125;</span> 张图片。&quot;</span>)<br><br><span class="hljs-comment"># 初始化结果列表</span><br>results = []<br><br><span class="hljs-comment"># 定义处理单张图片的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_single_image</span>(<span class="hljs-params">image_path</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 打开图片</span><br>        image = Image.<span class="hljs-built_in">open</span>(image_path).convert(<span class="hljs-string">&quot;RGB&quot;</span>)<br><br>        <span class="hljs-comment"># 构建对话结构，包含用户角色、图像和文本提示</span><br>        messages = [<br>            &#123;<br>                <span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>,<br>                <span class="hljs-string">&quot;content&quot;</span>: [<br>                    &#123;<br>                        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;image&quot;</span>,<br>                        <span class="hljs-string">&quot;image&quot;</span>: image_path,  <span class="hljs-comment"># 如果使用本地路径，确保模型支持</span><br>                    &#125;,<br>                    &#123;<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Please describe the pedestrian in the image&quot;</span>&#125;,<br>                ],<br>            &#125;<br>        ]<br>        text = processor.apply_chat_template(<br>            messages, tokenize=<span class="hljs-literal">False</span>, add_generation_prompt=<span class="hljs-literal">True</span><br>        )<br><br>        <span class="hljs-comment"># 预处理输入数据，将文本和图像转换为模型可接受的格式</span><br>        inputs = processor(<br>            text=[text],<br>            images=[image],<br>            padding=<span class="hljs-literal">True</span>,<br>            return_tensors=<span class="hljs-string">&quot;pt&quot;</span><br>        )<br><br>        <span class="hljs-comment"># 将输入数据移至指定设备</span><br>        inputs = &#123;k: v.to(device) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> inputs.items()&#125;<br><br>        <span class="hljs-comment"># 使用 `torch.no_grad()` 进行推理，节省内存</span><br>        <span class="hljs-keyword">with</span> torch.no_grad():<br>            generated_ids = model.generate(**inputs, max_new_tokens=<span class="hljs-number">1024</span>)<br><br>        <span class="hljs-comment"># 提取生成的新token（去除输入部分）</span><br>        generated_ids_trimmed = [<br>            generated_ids[i][<span class="hljs-built_in">len</span>(inputs[<span class="hljs-string">&#x27;input_ids&#x27;</span>][i]):]<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(generated_ids))<br>        ]<br><br>        <span class="hljs-comment"># 解码生成的token为可读文本</span><br>        output_text = processor.batch_decode(<br>            generated_ids_trimmed, skip_special_tokens=<span class="hljs-literal">True</span>, clean_up_tokenization_spaces=<span class="hljs-literal">False</span><br>        )<br><br>        <span class="hljs-comment"># 获取描述文本</span><br>        description = output_text[<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> output_text <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;No description generated.&quot;</span><br><br>        <span class="hljs-comment"># 清理缓存以释放内存</span><br>        <span class="hljs-keyword">del</span> inputs, generated_ids, generated_ids_trimmed, output_text<br>        torch.cuda.empty_cache()<br><br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-string">&quot;image_path&quot;</span>: image_path,<br>            <span class="hljs-string">&quot;description&quot;</span>: description<br>        &#125;<br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error processing <span class="hljs-subst">&#123;image_path&#125;</span>: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-string">&quot;image_path&quot;</span>: image_path,<br>            <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;Processing Failed&quot;</span><br>        &#125;<br><br><span class="hljs-comment"># 遍历每张图片并生成描述</span><br><span class="hljs-keyword">for</span> image_path <span class="hljs-keyword">in</span> tqdm(image_paths, desc=<span class="hljs-string">&quot;Processing Images&quot;</span>):<br>    result = process_single_image(image_path)<br>    results.append(result)<br><br><span class="hljs-comment"># 将结果保存为JSON文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_json, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    json.dump(results, f, ensure_ascii=<span class="hljs-literal">False</span>, indent=<span class="hljs-number">4</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;批量图片处理完成，结果已保存到 <span class="hljs-subst">&#123;output_json&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>大模型微调</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61B Project0</title>
    <link href="/2024/11/29/CS61B-Project0/"/>
    <url>/2024/11/29/CS61B-Project0/</url>
    
    <content type="html"><![CDATA[<h3 id="由于考研要学习数据结构顺便想着看一下国外的优质公开课，如果想看建议看2021spring的。"><a href="#由于考研要学习数据结构顺便想着看一下国外的优质公开课，如果想看建议看2021spring的。" class="headerlink" title="由于考研要学习数据结构顺便想着看一下国外的优质公开课，如果想看建议看2021spring的。"></a>由于考研要学习数据结构顺便想着看一下国外的优质公开课，如果想看建议看2021spring的。</h3><h4 id="我先看着的week1，proj0用的是java基础，完善2048这个项目里面的缺失的函数。"><a href="#我先看着的week1，proj0用的是java基础，完善2048这个项目里面的缺失的函数。" class="headerlink" title="我先看着的week1，proj0用的是java基础，完善2048这个项目里面的缺失的函数。"></a>我先看着的week1，proj0用的是java基础，完善2048这个项目里面的缺失的函数。</h4><h4 id="project0分为基础部分和实验部分。"><a href="#project0分为基础部分和实验部分。" class="headerlink" title="project0分为基础部分和实验部分。"></a>project0分为基础部分和实验部分。</h4><h4 id="这个2048程序首先是有点反人类，平时玩2048都是在认为左上角才是最小的坐标，但是程序中坐标是左下角才是开始，按照直角坐标系进行划分的，所以在这个程序中2048是按照列在前行在后的情况进行一系列函数的编写。"><a href="#这个2048程序首先是有点反人类，平时玩2048都是在认为左上角才是最小的坐标，但是程序中坐标是左下角才是开始，按照直角坐标系进行划分的，所以在这个程序中2048是按照列在前行在后的情况进行一系列函数的编写。" class="headerlink" title="这个2048程序首先是有点反人类，平时玩2048都是在认为左上角才是最小的坐标，但是程序中坐标是左下角才是开始，按照直角坐标系进行划分的，所以在这个程序中2048是按照列在前行在后的情况进行一系列函数的编写。"></a>这个2048程序首先是有点反人类，平时玩2048都是在认为左上角才是最小的坐标，但是程序中坐标是左下角才是开始，按照直角坐标系进行划分的，所以在这个程序中2048是按照列在前行在后的情况进行一系列函数的编写。</h4><h2 id="一、基础部分"><a href="#一、基础部分" class="headerlink" title="一、基础部分"></a>一、基础部分</h2><h4 id="基础部分要求完成的model-java中的emptySpaceExists-Board-b-、maxTileExists-Board-b-和atLeastOneMoveExists-Board-b-这三个函数"><a href="#基础部分要求完成的model-java中的emptySpaceExists-Board-b-、maxTileExists-Board-b-和atLeastOneMoveExists-Board-b-这三个函数" class="headerlink" title="基础部分要求完成的model.java中的emptySpaceExists(Board b)、maxTileExists(Board b)和atLeastOneMoveExists(Board b)这三个函数"></a>基础部分要求完成的<code>model.java</code>中的<code>emptySpaceExists(Board b)</code>、<code>maxTileExists(Board b)</code>和<code>atLeastOneMoveExists(Board b)</code>这三个函数</h4><h3 id="对于emptuSpaceExists-Board-b-的函数完善"><a href="#对于emptuSpaceExists-Board-b-的函数完善" class="headerlink" title="对于emptuSpaceExists(Board b)的函数完善"></a>对于<code>emptuSpaceExists(Board b)</code>的函数完善</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** Returns true if at least one space on the Board is empty.  </span><br><span class="hljs-comment"> *  Empty spaces are stored as null. * */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">emptySpaceExists</span><span class="hljs-params">(Board b)</span> &#123;  <br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Fill in this function.  </span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">judge</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;  <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j&lt;<span class="hljs-number">4</span>;j++)&#123;  <br>            <span class="hljs-keyword">if</span>(b.tile(i,j) == <span class="hljs-literal">null</span>)&#123;  <br>                judge = <span class="hljs-literal">true</span>;  <br>                <span class="hljs-keyword">break</span>;  <br>            &#125;  <br>  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> judge;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="这个的代码判断是否2048这个键盘是否为空的情况，Board-java中的函数tile-int-col-int-row-这个函数是用来判断当前的列行对应的格子有没有数据。因此我们看到判断是否为空就是通过该函数进行判空，然后boolean-judge改变即可。"><a href="#这个的代码判断是否2048这个键盘是否为空的情况，Board-java中的函数tile-int-col-int-row-这个函数是用来判断当前的列行对应的格子有没有数据。因此我们看到判断是否为空就是通过该函数进行判空，然后boolean-judge改变即可。" class="headerlink" title="这个的代码判断是否2048这个键盘是否为空的情况，Board.java中的函数tile(int col,int row)这个函数是用来判断当前的列行对应的格子有没有数据。因此我们看到判断是否为空就是通过该函数进行判空，然后boolean judge改变即可。"></a>这个的代码判断是否2048这个键盘是否为空的情况，<code>Board.java</code>中的函数<code>tile(int col,int row)</code>这个函数是用来判断当前的列行对应的格子有没有数据。因此我们看到判断是否为空就是通过该函数进行判空，然后boolean judge改变即可。</h4><h3 id="对于maxTileExists-Board-b-的函数完善"><a href="#对于maxTileExists-Board-b-的函数完善" class="headerlink" title="对于maxTileExists(Board b)的函数完善"></a>对于<code>maxTileExists(Board b)</code>的函数完善</h3><p><img src="https://cdn.jsdelivr.net/gh/Ljw030710/blogImage@main/20241128214555.png" alt="要求"></p><h4 id="通过这个要求就是有个注意点最好不要用x-2048而是x-MAX-PIECE就是避免了硬编程。"><a href="#通过这个要求就是有个注意点最好不要用x-2048而是x-MAX-PIECE就是避免了硬编程。" class="headerlink" title="通过这个要求就是有个注意点最好不要用x==2048而是x==MAX_PIECE就是避免了硬编程。"></a>通过这个要求就是有个注意点最好不要用<code>x==2048</code>而是<code>x==MAX_PIECE</code>就是避免了硬编程。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * Returns true if any tile is equal to the maximum valid value. * Maximum valid value is given by MAX_PIECE. Note that * given a Tile object t, we get its value with t.value(). */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">maxTileExists</span><span class="hljs-params">(Board b)</span> &#123;  <br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Fill in this function.  </span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">judge</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;  <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j&lt;<span class="hljs-number">4</span>;j++)&#123;  <br>            <span class="hljs-keyword">if</span>(b.tile(i,j) != <span class="hljs-literal">null</span> &amp;&amp; b.tile(i,j).value() == MAX_PIECE)&#123;  <br>                judge = <span class="hljs-literal">true</span>;  <br>                <span class="hljs-keyword">break</span>;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> judge;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="这个就是在说找到2048这个最大值，因为在程序中MAX-PIECE-2048所以就是找到2048。因此还是遍历数组寻找最大值，找不到就是false。"><a href="#这个就是在说找到2048这个最大值，因为在程序中MAX-PIECE-2048所以就是找到2048。因此还是遍历数组寻找最大值，找不到就是false。" class="headerlink" title="这个就是在说找到2048这个最大值，因为在程序中MAX_PIECE = 2048所以就是找到2048。因此还是遍历数组寻找最大值，找不到就是false。"></a>这个就是在说找到2048这个最大值，因为在程序中<code>MAX_PIECE = 2048</code>所以就是找到2048。因此还是遍历数组寻找最大值，找不到就是false。</h4><h3 id="对于atLeastOneMoveExists-Board-b-的函数完善"><a href="#对于atLeastOneMoveExists-Board-b-的函数完善" class="headerlink" title="对于atLeastOneMoveExists(Board b)的函数完善"></a>对于<code>atLeastOneMoveExists(Board b)</code>的函数完善</h3><p><img src="https://cdn.jsdelivr.net/gh/Ljw030710/blogImage@main/20241128221328.png" alt="要求"></p><h4 id="就是有两个要求，至少有一个格子是空白的，然后是有两个相邻格子会有相同的出现。"><a href="#就是有两个要求，至少有一个格子是空白的，然后是有两个相邻格子会有相同的出现。" class="headerlink" title="就是有两个要求，至少有一个格子是空白的，然后是有两个相邻格子会有相同的出现。"></a>就是有两个要求，至少有一个格子是空白的，然后是有两个相邻格子会有相同的出现。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * Returns true if there are any valid moves on the board. * There are two ways that there can be valid moves: * 1. There is at least one empty space on the board. * 2. There are two adjacent tiles with the same value. */</span><span class="hljs-comment">//要求1:有空白  </span><br><span class="hljs-comment">//要求2:有相邻的两个相同的  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">atLeastOneMoveExists</span><span class="hljs-params">(Board b)</span> &#123;  <br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Fill in this function.  </span><br>    <span class="hljs-keyword">if</span>(emptySpaceExists(b))  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">two</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;  <br>    <span class="hljs-type">int</span>[] dx = &#123;-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;  <br>    <span class="hljs-type">int</span>[] dy = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>&#125;;  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> b.size();  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; col &lt; size; col ++) &#123;  <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; row &lt; size; row ++)&#123;  <br>            <span class="hljs-type">int</span> <span class="hljs-variable">value_cur</span> <span class="hljs-operator">=</span> b.tile(col, row).value();  <br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k ++)&#123;  <br>                <span class="hljs-type">int</span> <span class="hljs-variable">cur_col</span> <span class="hljs-operator">=</span> col + dy[k];  <br>                <span class="hljs-type">int</span> <span class="hljs-variable">cur_row</span> <span class="hljs-operator">=</span> row + dx[k];  <br>                <span class="hljs-keyword">if</span>(cur_col &gt; <span class="hljs-number">0</span> &amp;&amp; cur_col &lt; size &amp;&amp; cur_row &gt; <span class="hljs-number">0</span> &amp;&amp; cur_row &lt; size &amp;&amp; b.tile(cur_col, cur_row).value() == value_cur)  <br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="因此需要找到的是判断一个方块的上下左右是否会出现相同的。所以需要方向向量进行移动。判断是否会有空白就是看第一个函数。接着就是判是否有相邻相同的，就是通过暴力求解规定在board的边界内即可。"><a href="#因此需要找到的是判断一个方块的上下左右是否会出现相同的。所以需要方向向量进行移动。判断是否会有空白就是看第一个函数。接着就是判是否有相邻相同的，就是通过暴力求解规定在board的边界内即可。" class="headerlink" title="因此需要找到的是判断一个方块的上下左右是否会出现相同的。所以需要方向向量进行移动。判断是否会有空白就是看第一个函数。接着就是判是否有相邻相同的，就是通过暴力求解规定在board的边界内即可。"></a>因此需要找到的是判断一个方块的上下左右是否会出现相同的。所以需要方向向量进行移动。判断是否会有空白就是看第一个函数。接着就是判是否有相邻相同的，就是通过暴力求解规定在board的边界内即可。</h4><h2 id="二、核心问题"><a href="#二、核心问题" class="headerlink" title="二、核心问题"></a>二、核心问题</h2><h4 id="核心问题就是如何写出2048的logic。"><a href="#核心问题就是如何写出2048的logic。" class="headerlink" title="核心问题就是如何写出2048的logic。"></a>核心问题就是如何写出2048的logic。</h4><p><img src="https://cdn.jsdelivr.net/gh/Ljw030710/blogImage@main/20241129141910.png" alt="核心问题"></p><h4 id="从这段文字看出就是2048的核心逻辑完成就是通过Model-java中的函数tile-进行编写"><a href="#从这段文字看出就是2048的核心逻辑完成就是通过Model-java中的函数tile-进行编写" class="headerlink" title="从这段文字看出就是2048的核心逻辑完成就是通过Model.java中的函数tile()进行编写"></a>从这段文字看出就是2048的核心逻辑完成就是通过<code>Model.java</code>中的函数<code>tile()</code>进行编写</h4><p><img src="https://cdn.jsdelivr.net/gh/Ljw030710/blogImage@main/20241129142201.png" alt="tile的功能"></p><h4 id="通过图片可以看出上移的时候在同一列的每一行如果该数字的前面有空位就会往上补，而且通过实例中的第三列可以看出例子是同一列的最后一行（表格中的第一行）开始遍历，也就是一次2048向上滑动的逻辑。"><a href="#通过图片可以看出上移的时候在同一列的每一行如果该数字的前面有空位就会往上补，而且通过实例中的第三列可以看出例子是同一列的最后一行（表格中的第一行）开始遍历，也就是一次2048向上滑动的逻辑。" class="headerlink" title="通过图片可以看出上移的时候在同一列的每一行如果该数字的前面有空位就会往上补，而且通过实例中的第三列可以看出例子是同一列的最后一行（表格中的第一行）开始遍历，也就是一次2048向上滑动的逻辑。"></a>通过图片可以看出上移的时候在同一列的每一行如果该数字的前面有空位就会往上补，而且通过实例中的第三列可以看出例子是同一列的最后一行（表格中的第一行）开始遍历，也就是一次2048向上滑动的逻辑。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tilt</span><span class="hljs-params">(Side side)</span> &#123;  <br>    <span class="hljs-type">boolean</span> changed;  <br>    changed = <span class="hljs-literal">false</span>;  <br>  <br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Modify this.board (and perhaps this.score) to account  </span><br>  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> board.size();  <br>  <br>    <span class="hljs-keyword">if</span>(side != Side.NORTH)  <br>        board.setViewingPerspective(side);  <br>  <br>    <span class="hljs-comment">// 对于每一列，先找到能向上移动的最大位置（找空格数）  </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; col &lt; size; col ++) &#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> size - <span class="hljs-number">2</span>; row &gt;= <span class="hljs-number">0</span>; row--) &#123;  <br>            <span class="hljs-type">int</span> <span class="hljs-variable">nulltile</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>            <span class="hljs-type">Tile</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> board.tile(col, row);  <br>            <span class="hljs-keyword">if</span>(t != <span class="hljs-literal">null</span>) &#123;  <br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">row_before</span> <span class="hljs-operator">=</span> row + <span class="hljs-number">1</span>; row_before &lt; size; row_before ++)&#123;  <br>                    <span class="hljs-keyword">if</span>(tile(col, row_before) == <span class="hljs-literal">null</span>)  <br>                        nulltile ++;  <br>                &#125;  <br>                board.move(col, row + nulltile, t);  <br>                changed = <span class="hljs-literal">true</span>;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; col &lt; size; col ++)&#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> size - <span class="hljs-number">2</span>; row &gt;= <span class="hljs-number">0</span>; row--) &#123;  <br>            <span class="hljs-type">Tile</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> board.tile(col, row);  <br>            <span class="hljs-keyword">if</span>(t1 != <span class="hljs-literal">null</span>)&#123;  <br>                <span class="hljs-type">Tile</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> board.tile(col, row + <span class="hljs-number">1</span>);  <br>                <span class="hljs-keyword">if</span>(t2 != <span class="hljs-literal">null</span> &amp;&amp; t1.value() == t2.value())&#123;  <br>                    board.move(col, row + <span class="hljs-number">1</span>, t1);  <br>                    changed = <span class="hljs-literal">true</span>;  <br>                    score += <span class="hljs-number">2</span> * t2.value();  <br>                &#125;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; col &lt; size; col ++) &#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> size - <span class="hljs-number">2</span>; row &gt;= <span class="hljs-number">0</span>; row--) &#123;  <br>            <span class="hljs-type">int</span> <span class="hljs-variable">nulltile</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>            <span class="hljs-type">Tile</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> board.tile(col, row);  <br>            <span class="hljs-keyword">if</span>(t != <span class="hljs-literal">null</span>) &#123;  <br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">row_before</span> <span class="hljs-operator">=</span> row + <span class="hljs-number">1</span>; row_before &lt; size; row_before ++)&#123;  <br>                    <span class="hljs-keyword">if</span>(tile(col, row_before) == <span class="hljs-literal">null</span>)  <br>                        nulltile ++;  <br>                &#125;  <br>                board.move(col, row + nulltile, t);  <br>                changed = <span class="hljs-literal">true</span>;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">if</span>(side != Side.NORTH)  <br>        board.setViewingPerspective(Side.NORTH);  <br>  <br>    <span class="hljs-comment">// for the tilt to the Side SIDE. If the board changed, set the  </span><br>    <span class="hljs-comment">// changed local variable to true.    checkGameOver();  </span><br>    <span class="hljs-keyword">if</span> (changed) &#123;  <br>        setChanged();  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> changed;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="首先2048的tile-里面的是Side-side然后可以看side-java和board-java可以发现关于上下左右的滑动是做了个处理，就是通过board-setViewingPerspective-side-这是说滑动的是如果是向左划会将整个表进行翻转，翻转成向北滑动的情况，就不用额外考虑其他三种情况。"><a href="#首先2048的tile-里面的是Side-side然后可以看side-java和board-java可以发现关于上下左右的滑动是做了个处理，就是通过board-setViewingPerspective-side-这是说滑动的是如果是向左划会将整个表进行翻转，翻转成向北滑动的情况，就不用额外考虑其他三种情况。" class="headerlink" title="首先2048的tile()里面的是Side side然后可以看side.java和board.java可以发现关于上下左右的滑动是做了个处理，就是通过board.setViewingPerspective(side)这是说滑动的是如果是向左划会将整个表进行翻转，翻转成向北滑动的情况，就不用额外考虑其他三种情况。"></a>首先2048的tile()里面的是Side side然后可以看<code>side.java</code>和<code>board.java</code>可以发现关于上下左右的滑动是做了个处理，就是通过<code>board.setViewingPerspective(side)</code>这是说滑动的是如果是向左划会将整个表进行翻转，翻转成向北滑动的情况，就不用额外考虑其他三种情况。</h4><h4 id="首先我们就是需要有数字的格子的行上会不会有空格有的话进行补充，跳到空格那里。"><a href="#首先我们就是需要有数字的格子的行上会不会有空格有的话进行补充，跳到空格那里。" class="headerlink" title="首先我们就是需要有数字的格子的行上会不会有空格有的话进行补充，跳到空格那里。"></a>首先我们就是需要有数字的格子的行上会不会有空格有的话进行补充，跳到空格那里。</h4><h4 id="第二个for循环就是讲相同数字进行merge，而board-move-这个函数里面就有merge的操作，不需要额外写。"><a href="#第二个for循环就是讲相同数字进行merge，而board-move-这个函数里面就有merge的操作，不需要额外写。" class="headerlink" title="第二个for循环就是讲相同数字进行merge，而board.move()这个函数里面就有merge的操作，不需要额外写。"></a>第二个for循环就是讲相同数字进行merge，而<code>board.move()</code>这个函数里面就有merge的操作，不需要额外写。</h4><h4 id="第三个for循环和第一个for循环一样，因为merge完了后会有新的空位出来，因此需要填充新的空位。"><a href="#第三个for循环和第一个for循环一样，因为merge完了后会有新的空位出来，因此需要填充新的空位。" class="headerlink" title="第三个for循环和第一个for循环一样，因为merge完了后会有新的空位出来，因此需要填充新的空位。"></a>第三个for循环和第一个for循环一样，因为merge完了后会有新的空位出来，因此需要填充新的空位。</h4>]]></content>
    
    
    
    <tags>
      
      <tag>CS61B</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
