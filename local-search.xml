<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CS61B Project0</title>
    <link href="/2024/11/29/CS61B-Project0/"/>
    <url>/2024/11/29/CS61B-Project0/</url>
    
    <content type="html"><![CDATA[<h3 id="由于考研要学习数据结构顺便想着看一下国外的优质公开课，如果想看建议看2021spring的。"><a href="#由于考研要学习数据结构顺便想着看一下国外的优质公开课，如果想看建议看2021spring的。" class="headerlink" title="由于考研要学习数据结构顺便想着看一下国外的优质公开课，如果想看建议看2021spring的。"></a>由于考研要学习数据结构顺便想着看一下国外的优质公开课，如果想看建议看2021spring的。</h3><h4 id="我先看着的week1，proj0用的是java基础，完善2048这个项目里面的缺失的函数。"><a href="#我先看着的week1，proj0用的是java基础，完善2048这个项目里面的缺失的函数。" class="headerlink" title="我先看着的week1，proj0用的是java基础，完善2048这个项目里面的缺失的函数。"></a>我先看着的week1，proj0用的是java基础，完善2048这个项目里面的缺失的函数。</h4><h4 id="project0分为基础部分和实验部分。"><a href="#project0分为基础部分和实验部分。" class="headerlink" title="project0分为基础部分和实验部分。"></a>project0分为基础部分和实验部分。</h4><h4 id="这个2048程序首先是有点反人类，平时玩2048都是在认为左上角才是最小的坐标，但是程序中坐标是左下角才是开始，按照直角坐标系进行划分的，所以在这个程序中2048是按照列在前行在后的情况进行一系列函数的编写。"><a href="#这个2048程序首先是有点反人类，平时玩2048都是在认为左上角才是最小的坐标，但是程序中坐标是左下角才是开始，按照直角坐标系进行划分的，所以在这个程序中2048是按照列在前行在后的情况进行一系列函数的编写。" class="headerlink" title="这个2048程序首先是有点反人类，平时玩2048都是在认为左上角才是最小的坐标，但是程序中坐标是左下角才是开始，按照直角坐标系进行划分的，所以在这个程序中2048是按照列在前行在后的情况进行一系列函数的编写。"></a>这个2048程序首先是有点反人类，平时玩2048都是在认为左上角才是最小的坐标，但是程序中坐标是左下角才是开始，按照直角坐标系进行划分的，所以在这个程序中2048是按照列在前行在后的情况进行一系列函数的编写。</h4><h2 id="一、基础部分"><a href="#一、基础部分" class="headerlink" title="一、基础部分"></a>一、基础部分</h2><h4 id="基础部分要求完成的model-java中的emptySpaceExists-Board-b-、maxTileExists-Board-b-和atLeastOneMoveExists-Board-b-这三个函数"><a href="#基础部分要求完成的model-java中的emptySpaceExists-Board-b-、maxTileExists-Board-b-和atLeastOneMoveExists-Board-b-这三个函数" class="headerlink" title="基础部分要求完成的model.java中的emptySpaceExists(Board b)、maxTileExists(Board b)和atLeastOneMoveExists(Board b)这三个函数"></a>基础部分要求完成的<code>model.java</code>中的<code>emptySpaceExists(Board b)</code>、<code>maxTileExists(Board b)</code>和<code>atLeastOneMoveExists(Board b)</code>这三个函数</h4><h3 id="对于emptuSpaceExists-Board-b-的函数完善"><a href="#对于emptuSpaceExists-Board-b-的函数完善" class="headerlink" title="对于emptuSpaceExists(Board b)的函数完善"></a>对于<code>emptuSpaceExists(Board b)</code>的函数完善</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** Returns true if at least one space on the Board is empty.  </span><br><span class="hljs-comment"> *  Empty spaces are stored as null. * */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">emptySpaceExists</span><span class="hljs-params">(Board b)</span> &#123;  <br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Fill in this function.  </span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">judge</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;  <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j&lt;<span class="hljs-number">4</span>;j++)&#123;  <br>            <span class="hljs-keyword">if</span>(b.tile(i,j) == <span class="hljs-literal">null</span>)&#123;  <br>                judge = <span class="hljs-literal">true</span>;  <br>                <span class="hljs-keyword">break</span>;  <br>            &#125;  <br>  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> judge;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="这个的代码判断是否2048这个键盘是否为空的情况，Board-java中的函数tile-int-col-int-row-这个函数是用来判断当前的列行对应的格子有没有数据。因此我们看到判断是否为空就是通过该函数进行判空，然后boolean-judge改变即可。"><a href="#这个的代码判断是否2048这个键盘是否为空的情况，Board-java中的函数tile-int-col-int-row-这个函数是用来判断当前的列行对应的格子有没有数据。因此我们看到判断是否为空就是通过该函数进行判空，然后boolean-judge改变即可。" class="headerlink" title="这个的代码判断是否2048这个键盘是否为空的情况，Board.java中的函数tile(int col,int row)这个函数是用来判断当前的列行对应的格子有没有数据。因此我们看到判断是否为空就是通过该函数进行判空，然后boolean judge改变即可。"></a>这个的代码判断是否2048这个键盘是否为空的情况，<code>Board.java</code>中的函数<code>tile(int col,int row)</code>这个函数是用来判断当前的列行对应的格子有没有数据。因此我们看到判断是否为空就是通过该函数进行判空，然后boolean judge改变即可。</h4><h3 id="对于maxTileExists-Board-b-的函数完善"><a href="#对于maxTileExists-Board-b-的函数完善" class="headerlink" title="对于maxTileExists(Board b)的函数完善"></a>对于<code>maxTileExists(Board b)</code>的函数完善</h3><p><img src="https://cdn.jsdelivr.net/gh/Ljw030710/blogImage@main/20241128214555.png" alt="要求"></p><h4 id="通过这个要求就是有个注意点最好不要用x-2048而是x-MAX-PIECE就是避免了硬编程。"><a href="#通过这个要求就是有个注意点最好不要用x-2048而是x-MAX-PIECE就是避免了硬编程。" class="headerlink" title="通过这个要求就是有个注意点最好不要用x==2048而是x==MAX_PIECE就是避免了硬编程。"></a>通过这个要求就是有个注意点最好不要用<code>x==2048</code>而是<code>x==MAX_PIECE</code>就是避免了硬编程。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * Returns true if any tile is equal to the maximum valid value. * Maximum valid value is given by MAX_PIECE. Note that * given a Tile object t, we get its value with t.value(). */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">maxTileExists</span><span class="hljs-params">(Board b)</span> &#123;  <br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Fill in this function.  </span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">judge</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;  <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j&lt;<span class="hljs-number">4</span>;j++)&#123;  <br>            <span class="hljs-keyword">if</span>(b.tile(i,j) != <span class="hljs-literal">null</span> &amp;&amp; b.tile(i,j).value() == MAX_PIECE)&#123;  <br>                judge = <span class="hljs-literal">true</span>;  <br>                <span class="hljs-keyword">break</span>;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> judge;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="这个就是在说找到2048这个最大值，因为在程序中MAX-PIECE-2048所以就是找到2048。因此还是遍历数组寻找最大值，找不到就是false。"><a href="#这个就是在说找到2048这个最大值，因为在程序中MAX-PIECE-2048所以就是找到2048。因此还是遍历数组寻找最大值，找不到就是false。" class="headerlink" title="这个就是在说找到2048这个最大值，因为在程序中MAX_PIECE = 2048所以就是找到2048。因此还是遍历数组寻找最大值，找不到就是false。"></a>这个就是在说找到2048这个最大值，因为在程序中<code>MAX_PIECE = 2048</code>所以就是找到2048。因此还是遍历数组寻找最大值，找不到就是false。</h4><h3 id="对于atLeastOneMoveExists-Board-b-的函数完善"><a href="#对于atLeastOneMoveExists-Board-b-的函数完善" class="headerlink" title="对于atLeastOneMoveExists(Board b)的函数完善"></a>对于<code>atLeastOneMoveExists(Board b)</code>的函数完善</h3><p><img src="https://cdn.jsdelivr.net/gh/Ljw030710/blogImage@main/20241128221328.png" alt="要求"></p><h4 id="就是有两个要求，至少有一个格子是空白的，然后是有两个相邻格子会有相同的出现。"><a href="#就是有两个要求，至少有一个格子是空白的，然后是有两个相邻格子会有相同的出现。" class="headerlink" title="就是有两个要求，至少有一个格子是空白的，然后是有两个相邻格子会有相同的出现。"></a>就是有两个要求，至少有一个格子是空白的，然后是有两个相邻格子会有相同的出现。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * Returns true if there are any valid moves on the board. * There are two ways that there can be valid moves: * 1. There is at least one empty space on the board. * 2. There are two adjacent tiles with the same value. */</span><span class="hljs-comment">//要求1:有空白  </span><br><span class="hljs-comment">//要求2:有相邻的两个相同的  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">atLeastOneMoveExists</span><span class="hljs-params">(Board b)</span> &#123;  <br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Fill in this function.  </span><br>    <span class="hljs-keyword">if</span>(emptySpaceExists(b))  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">two</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;  <br>    <span class="hljs-type">int</span>[] dx = &#123;-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;  <br>    <span class="hljs-type">int</span>[] dy = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>&#125;;  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> b.size();  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; col &lt; size; col ++) &#123;  <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; row &lt; size; row ++)&#123;  <br>            <span class="hljs-type">int</span> <span class="hljs-variable">value_cur</span> <span class="hljs-operator">=</span> b.tile(col, row).value();  <br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k ++)&#123;  <br>                <span class="hljs-type">int</span> <span class="hljs-variable">cur_col</span> <span class="hljs-operator">=</span> col + dy[k];  <br>                <span class="hljs-type">int</span> <span class="hljs-variable">cur_row</span> <span class="hljs-operator">=</span> row + dx[k];  <br>                <span class="hljs-keyword">if</span>(cur_col &gt; <span class="hljs-number">0</span> &amp;&amp; cur_col &lt; size &amp;&amp; cur_row &gt; <span class="hljs-number">0</span> &amp;&amp; cur_row &lt; size &amp;&amp; b.tile(cur_col, cur_row).value() == value_cur)  <br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="因此需要找到的是判断一个方块的上下左右是否会出现相同的。所以需要方向向量进行移动。判断是否会有空白就是看第一个函数。接着就是判是否有相邻相同的，就是通过暴力求解规定在board的边界内即可。"><a href="#因此需要找到的是判断一个方块的上下左右是否会出现相同的。所以需要方向向量进行移动。判断是否会有空白就是看第一个函数。接着就是判是否有相邻相同的，就是通过暴力求解规定在board的边界内即可。" class="headerlink" title="因此需要找到的是判断一个方块的上下左右是否会出现相同的。所以需要方向向量进行移动。判断是否会有空白就是看第一个函数。接着就是判是否有相邻相同的，就是通过暴力求解规定在board的边界内即可。"></a>因此需要找到的是判断一个方块的上下左右是否会出现相同的。所以需要方向向量进行移动。判断是否会有空白就是看第一个函数。接着就是判是否有相邻相同的，就是通过暴力求解规定在board的边界内即可。</h4><h2 id="二、核心问题"><a href="#二、核心问题" class="headerlink" title="二、核心问题"></a>二、核心问题</h2><h4 id="核心问题就是如何写出2048的logic。"><a href="#核心问题就是如何写出2048的logic。" class="headerlink" title="核心问题就是如何写出2048的logic。"></a>核心问题就是如何写出2048的logic。</h4><p><img src="https://cdn.jsdelivr.net/gh/Ljw030710/blogImage@main/20241129141910.png" alt="核心问题"></p><h4 id="从这段文字看出就是2048的核心逻辑完成就是通过Model-java中的函数tile-进行编写"><a href="#从这段文字看出就是2048的核心逻辑完成就是通过Model-java中的函数tile-进行编写" class="headerlink" title="从这段文字看出就是2048的核心逻辑完成就是通过Model.java中的函数tile()进行编写"></a>从这段文字看出就是2048的核心逻辑完成就是通过<code>Model.java</code>中的函数<code>tile()</code>进行编写</h4><p><img src="https://cdn.jsdelivr.net/gh/Ljw030710/blogImage@main/20241129142201.png" alt="tile的功能"></p><h4 id="通过图片可以看出上移的时候在同一列的每一行如果该数字的前面有空位就会往上补，而且通过实例中的第三列可以看出例子是同一列的最后一行（表格中的第一行）开始遍历，也就是一次2048向上滑动的逻辑。"><a href="#通过图片可以看出上移的时候在同一列的每一行如果该数字的前面有空位就会往上补，而且通过实例中的第三列可以看出例子是同一列的最后一行（表格中的第一行）开始遍历，也就是一次2048向上滑动的逻辑。" class="headerlink" title="通过图片可以看出上移的时候在同一列的每一行如果该数字的前面有空位就会往上补，而且通过实例中的第三列可以看出例子是同一列的最后一行（表格中的第一行）开始遍历，也就是一次2048向上滑动的逻辑。"></a>通过图片可以看出上移的时候在同一列的每一行如果该数字的前面有空位就会往上补，而且通过实例中的第三列可以看出例子是同一列的最后一行（表格中的第一行）开始遍历，也就是一次2048向上滑动的逻辑。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tilt</span><span class="hljs-params">(Side side)</span> &#123;  <br>    <span class="hljs-type">boolean</span> changed;  <br>    changed = <span class="hljs-literal">false</span>;  <br>  <br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Modify this.board (and perhaps this.score) to account  </span><br>  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> board.size();  <br>  <br>    <span class="hljs-keyword">if</span>(side != Side.NORTH)  <br>        board.setViewingPerspective(side);  <br>  <br>    <span class="hljs-comment">// 对于每一列，先找到能向上移动的最大位置（找空格数）  </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; col &lt; size; col ++) &#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> size - <span class="hljs-number">2</span>; row &gt;= <span class="hljs-number">0</span>; row--) &#123;  <br>            <span class="hljs-type">int</span> <span class="hljs-variable">nulltile</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>            <span class="hljs-type">Tile</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> board.tile(col, row);  <br>            <span class="hljs-keyword">if</span>(t != <span class="hljs-literal">null</span>) &#123;  <br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">row_before</span> <span class="hljs-operator">=</span> row + <span class="hljs-number">1</span>; row_before &lt; size; row_before ++)&#123;  <br>                    <span class="hljs-keyword">if</span>(tile(col, row_before) == <span class="hljs-literal">null</span>)  <br>                        nulltile ++;  <br>                &#125;  <br>                board.move(col, row + nulltile, t);  <br>                changed = <span class="hljs-literal">true</span>;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; col &lt; size; col ++)&#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> size - <span class="hljs-number">2</span>; row &gt;= <span class="hljs-number">0</span>; row--) &#123;  <br>            <span class="hljs-type">Tile</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> board.tile(col, row);  <br>            <span class="hljs-keyword">if</span>(t1 != <span class="hljs-literal">null</span>)&#123;  <br>                <span class="hljs-type">Tile</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> board.tile(col, row + <span class="hljs-number">1</span>);  <br>                <span class="hljs-keyword">if</span>(t2 != <span class="hljs-literal">null</span> &amp;&amp; t1.value() == t2.value())&#123;  <br>                    board.move(col, row + <span class="hljs-number">1</span>, t1);  <br>                    changed = <span class="hljs-literal">true</span>;  <br>                    score += <span class="hljs-number">2</span> * t2.value();  <br>                &#125;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; col &lt; size; col ++) &#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> size - <span class="hljs-number">2</span>; row &gt;= <span class="hljs-number">0</span>; row--) &#123;  <br>            <span class="hljs-type">int</span> <span class="hljs-variable">nulltile</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>            <span class="hljs-type">Tile</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> board.tile(col, row);  <br>            <span class="hljs-keyword">if</span>(t != <span class="hljs-literal">null</span>) &#123;  <br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">row_before</span> <span class="hljs-operator">=</span> row + <span class="hljs-number">1</span>; row_before &lt; size; row_before ++)&#123;  <br>                    <span class="hljs-keyword">if</span>(tile(col, row_before) == <span class="hljs-literal">null</span>)  <br>                        nulltile ++;  <br>                &#125;  <br>                board.move(col, row + nulltile, t);  <br>                changed = <span class="hljs-literal">true</span>;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">if</span>(side != Side.NORTH)  <br>        board.setViewingPerspective(Side.NORTH);  <br>  <br>    <span class="hljs-comment">// for the tilt to the Side SIDE. If the board changed, set the  </span><br>    <span class="hljs-comment">// changed local variable to true.    checkGameOver();  </span><br>    <span class="hljs-keyword">if</span> (changed) &#123;  <br>        setChanged();  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> changed;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="首先2048的tile-里面的是Side-side然后可以看side-java和board-java可以发现关于上下左右的滑动是做了个处理，就是通过board-setViewingPerspective-side-这是说滑动的是如果是向左划会将整个表进行翻转，翻转成向北滑动的情况，就不用额外考虑其他三种情况。"><a href="#首先2048的tile-里面的是Side-side然后可以看side-java和board-java可以发现关于上下左右的滑动是做了个处理，就是通过board-setViewingPerspective-side-这是说滑动的是如果是向左划会将整个表进行翻转，翻转成向北滑动的情况，就不用额外考虑其他三种情况。" class="headerlink" title="首先2048的tile()里面的是Side side然后可以看side.java和board.java可以发现关于上下左右的滑动是做了个处理，就是通过board.setViewingPerspective(side)这是说滑动的是如果是向左划会将整个表进行翻转，翻转成向北滑动的情况，就不用额外考虑其他三种情况。"></a>首先2048的tile()里面的是Side side然后可以看<code>side.java</code>和<code>board.java</code>可以发现关于上下左右的滑动是做了个处理，就是通过<code>board.setViewingPerspective(side)</code>这是说滑动的是如果是向左划会将整个表进行翻转，翻转成向北滑动的情况，就不用额外考虑其他三种情况。</h4><h4 id="首先我们就是需要有数字的格子的行上会不会有空格有的话进行补充，跳到空格那里。"><a href="#首先我们就是需要有数字的格子的行上会不会有空格有的话进行补充，跳到空格那里。" class="headerlink" title="首先我们就是需要有数字的格子的行上会不会有空格有的话进行补充，跳到空格那里。"></a>首先我们就是需要有数字的格子的行上会不会有空格有的话进行补充，跳到空格那里。</h4><h4 id="第二个for循环就是讲相同数字进行merge，而board-move-这个函数里面就有merge的操作，不需要额外写。"><a href="#第二个for循环就是讲相同数字进行merge，而board-move-这个函数里面就有merge的操作，不需要额外写。" class="headerlink" title="第二个for循环就是讲相同数字进行merge，而board.move()这个函数里面就有merge的操作，不需要额外写。"></a>第二个for循环就是讲相同数字进行merge，而<code>board.move()</code>这个函数里面就有merge的操作，不需要额外写。</h4><h4 id="第三个for循环和第一个for循环一样，因为merge完了后会有新的空位出来，因此需要填充新的空位。"><a href="#第三个for循环和第一个for循环一样，因为merge完了后会有新的空位出来，因此需要填充新的空位。" class="headerlink" title="第三个for循环和第一个for循环一样，因为merge完了后会有新的空位出来，因此需要填充新的空位。"></a>第三个for循环和第一个for循环一样，因为merge完了后会有新的空位出来，因此需要填充新的空位。</h4>]]></content>
    
    
    
    <tags>
      
      <tag>CS61B</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
